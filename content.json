{"meta":{"title":"Memex","subtitle":"","description":"","author":"Xiaoyu CHU","url":"http://example.com","root":"/"},"pages":[{"title":"Categories","date":"2021-07-14T02:32:38.665Z","updated":"2021-07-14T02:32:38.665Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"About","date":"2021-09-17T02:13:52.008Z","updated":"2021-09-17T02:13:52.008Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"Hello World. This is a personal website. About MemexMemex == Memory extender. This concept is from: Vannevar Bush - As We May Think/诚若所思 https://dl.acm.org/doi/10.1145/227181.227186 About MeTODO."},{"title":"Tags","date":"2021-07-14T02:32:38.667Z","updated":"2021-07-14T02:32:38.666Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"task04 学习GPT","slug":"nlp-transformer-task04","date":"2021-09-19T12:02:17.000Z","updated":"2021-09-20T16:10:41.187Z","comments":true,"path":"nlp-transformer-task04/","link":"","permalink":"http://example.com/nlp-transformer-task04/","excerpt":"","text":"从语言模型说起自编码语言模型（auto-encoder）自编码语言模型通过随机Mask输入的部分单词，然后预训练的目标是预测被Mask的单词，不仅可以融入上文信息，还可以自然的融入下文信息。ex. BERT. 优点：自然地融入双向语言模型，同时看到被预测单词的上文和下文 缺点：训练和预测不一致。训练的时候输入引入了[Mask]标记，但是在预测阶段往往没有这个[Mask]标记，导致预训练阶段和Fine-tuning阶段不一致。 自回归语言模型（auto-regressive）语言模型根据输入句子的一部分文本来预测下一个词。ex. GPT-2 优点：对于生成类的NLP任务，比如文本摘要，机器翻译等，从左向右的生成内容，天然和自回归语言模型契合。 缺点：由于一般是从左到右（当然也可能从右到左），所以只能利用上文或者下文的信息，不能同时利用上文和下文的信息。 Transformer, BERT, GPT-2的关系Transformer的Encoder进化成了BERT，Decoder进化成了GPT2。 如果要使用Transformer来解决语言模型任务，并不需要完整的Encoder部分和Decoder部分，于是在原始Transformer之后的许多研究工作中，人们尝试只使用Transformer Encoder或者Decoder进行预训练。比如BERT只使用了Encoder部分进行masked language model（自编码）训练，GPT-2便是只使用了Decoder部分进行自回归（auto regressive）语言模型训练。 GPT-2概述模型的输入输入的处理分为两步：token embedding + position encoding。即: 在嵌入矩阵中查找输入的单词的对应的embedding向量 融入位置编码 Decoder层每一层decoder的组成：Masked Self-Attention + Feed Forward Neural Network Self-Attention所做的事情是：它通过对句子片段中每个词的相关性打分，并将这些词的表示向量根据相关性加权求和，从而让模型能够将词和其他相关词向量的信息融合起来。 Masked Self-Attention做的是：将mask位置对应的的attention score变成一个非常小的数字或者0，让其他单词再self attention的时候（加权求和的时候）不考虑这些单词。 模型的输出当模型顶部的Decoder层产生输出向量时，模型会将这个向量乘以一个巨大的嵌入矩阵（vocab size x embedding size）来计算该向量和所有单词embedding向量的相关得分。这个相乘的结果，被解释为模型词汇表中每个词的分数，经过softmax之后被转换成概率。 我们可以选择最高分数的 token（top_k=1），也可以同时考虑其他词（top k）。假设每个位置输出k个token，假设总共输出n个token，那么基于n个单词的联合概率选择的输出序列会更好。 模型完成一次迭代，输出一个单词。模型会继续迭代，直到所有的单词都已经生成，或者直到输出了表示句子末尾的token。 关于Self-Attention, Masked Self-AttentionSelf-AttentionSelf-Attention 主要通过 3 个步骤来实现： 为每个路径创建 Query、Key、Value 矩阵。 对于每个输入的token，使用它的Query向量为所有其他的Key向量进行打分。 将 Value 向量乘以它们对应的分数后求和。 Masked Self-Attention在Self-Attention的第2步，把未来的 token 评分设置为0，因此模型不能看到未来的词。 这个屏蔽（masking）经常用一个矩阵来实现，称为 attention mask矩阵。 GPT-2中的Self-Attention(skip) 自回归语言模型的应用应用在下游并取得不错效果的NLP任务有：机器翻译、摘要生成、音乐生成。（可见，主要是跟预训练任务相似的生成类任务。） 参考资料 基于transformers的自然语言处理(NLP)入门–在线阅读 https://datawhalechina.github.io/learn-nlp-with-transformers/#/","categories":[{"name":"04 组队学习","slug":"04-组队学习","permalink":"http://example.com/categories/04-%E7%BB%84%E9%98%9F%E5%AD%A6%E4%B9%A0/"},{"name":"第29期 基于transformer的NLP","slug":"04-组队学习/第29期-基于transformer的NLP","permalink":"http://example.com/categories/04-%E7%BB%84%E9%98%9F%E5%AD%A6%E4%B9%A0/%E7%AC%AC29%E6%9C%9F-%E5%9F%BA%E4%BA%8Etransformer%E7%9A%84NLP/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"http://example.com/tags/%E7%AC%94%E8%AE%B0/"},{"name":"NLP","slug":"NLP","permalink":"http://example.com/tags/NLP/"},{"name":"组队学习","slug":"组队学习","permalink":"http://example.com/tags/%E7%BB%84%E9%98%9F%E5%AD%A6%E4%B9%A0/"},{"name":"预训练模型","slug":"预训练模型","permalink":"http://example.com/tags/%E9%A2%84%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B/"},{"name":"GPT","slug":"GPT","permalink":"http://example.com/tags/GPT/"}]},{"title":"chap01-02 PyTorch的简介和安装、PyTorch基础知识","slug":"pytorch-chap01","date":"2021-09-18T02:26:03.000Z","updated":"2021-09-18T10:05:38.099Z","comments":true,"path":"pytorch-chap01/","link":"","permalink":"http://example.com/pytorch-chap01/","excerpt":"","text":"第一章 PyTorch的简介和安装PyTorch简介2019年就应该all in pytorch，在我还用tf入门的时候，已经落后一个世纪了。/doge PyTorch的安装PyTorch官网：https://pytorch.org/ 第二章 PyTorch的基础知识张量张量是基于向量和矩阵的推广，比如我们可以将标量视为零阶张量，矢量可以视为一阶张量，矩阵就是二阶张量。 0维张量/标量 标量是1个数字 1维张量/向量 1维张量称为“向量” 2维张量 2维张量称为“矩阵” 3维张量 时间序列数据、股价、文本数据、彩色图片(RGB) 4维=图像 5维=视频 在PyTorch中， torch.Tensor 是存储和变换数据的主要工具。 构造123x = torch.rand(4, 3) # 构造张量print(x.size()) # 获取维度信息print(x.shape) # 获取维度信息 还有一些常见的构造Tensor的函数： 索引12print(x[:, 1]) # 取第2列y = torch.view(1) # 改变维度信息 PyTorch中的Tensor支持超过一百种操作，包括转置、索引、切片、数学运算、线性代数、随机数等等，可参考官方文档。 自动求导PyTorch中，所有神经网络的核心是autograd包。autograd包为张量上的所有操作提供了自动求导机制。 并行计算课程问题反馈 教程中的链接最好在新标签页中打开 参考资料 Datawhale开源项目：深入浅出PyTorch https://github.com/datawhalechina/thorough-pytorch/","categories":[{"name":"04 组队学习","slug":"04-组队学习","permalink":"http://example.com/categories/04-%E7%BB%84%E9%98%9F%E5%AD%A6%E4%B9%A0/"},{"name":"第29.5期 深入浅出PyTorch","slug":"04-组队学习/第29-5期-深入浅出PyTorch","permalink":"http://example.com/categories/04-%E7%BB%84%E9%98%9F%E5%AD%A6%E4%B9%A0/%E7%AC%AC29-5%E6%9C%9F-%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAPyTorch/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"http://example.com/tags/%E7%AC%94%E8%AE%B0/"},{"name":"组队学习","slug":"组队学习","permalink":"http://example.com/tags/%E7%BB%84%E9%98%9F%E5%AD%A6%E4%B9%A0/"},{"name":"PyTorch","slug":"PyTorch","permalink":"http://example.com/tags/PyTorch/"}]},{"title":"task03 学习BERT","slug":"nlp-transformer-task03","date":"2021-09-17T01:44:18.000Z","updated":"2021-09-20T18:57:26.442Z","comments":true,"path":"nlp-transformer-task03/","link":"","permalink":"http://example.com/nlp-transformer-task03/","excerpt":"","text":"BERT简介BERT首先在大规模无监督语料上进行预训练，然后在预训练好的参数基础上增加一个与任务相关的神经网络层，并在该任务的数据上进行微调训，最终取得很好的效果。BERT的这个训练过程可以简述为：预训练（pre-train）+微调（fine-tune/fine-tuning），已经成为最近几年最流行的NLP解决方案的范式。 如何直接应用BERT 下载在无监督语料上预训练好的BERT模型，一般来说对应了3个文件：BERT模型配置文件（用来确定Transformer的层数，隐藏层大小等），BERT模型参数，BERT词表（BERT所能处理的所有token）。 针对特定任务需要，在BERT模型上增加一个任务相关的神经网络，比如一个简单的分类器，然后在特定任务监督数据上进行微调训练。（微调的一种理解：学习率较小，训练epoch数量较少，对模型整体参数进行轻微调整） BERT的结构BERT模型结构基本上就是Transformer的encoder部分。 BERT的输入和输出BERT模型输入有一点特殊的地方是在一句话最开始拼接了一个[CLS] token，如下图所示。这个特殊的[CLS] token经过BERT得到的向量表示通常被用作当前的句子表示。我们直接使用第1个位置的向量输出（对应的是[CLS]）传入classifier网络，然后进行分类任务。 BERT的预训练任务BERT是一个多任务模型，它的任务是由两个自监督任务组成。 Masked Language Model（MLM）MLM：将输入文本序列的部分（15%）单词随机Mask掉，让BERT来预测这些被Mask的词语。（可以说是完形填空） Masked Language Model（MLM）和核心思想取自Wilson Taylor在1953年发表的一篇论文《cloze procedure: A new tool for measuring readability》。所谓MLM是指在训练的时候随即从输入预料上mask掉一些单词，然后通过的上下文预测该单词，该任务非常像我们在中学时期经常做的完形填空。正如传统的语言模型算法和RNN匹配那样，MLM的这个性质和Transformer的结构是非常匹配的。 Next Sentence Prediction（NSP）NSP：判断两个句子是否是相邻句子。即，输入是sentence A和sentence B，经过BERT编码之后，使用CLS token的向量表示来预测两个句子是否是相邻句子。 Next Sentence Prediction（NSP）的任务是判断句子B是否是句子A的下文。如果是的话输出’IsNext‘，否则输出’NotNext‘。训练数据的生成方式是从平行语料中随机抽取的连续两句话，其中50%保留抽取的两句话，它们符合IsNext关系，另外50%的第二句话是随机从预料中提取的，它们的关系是NotNext的。这个关系保存在[CLS]符号中。 BERT的应用特征提取由于BERT模型可以得到输入序列所对应的所有token的向量表示，因此不仅可以使用最后一程BERT的输出连接上任务网络进行微调，还可以直接使用这些token的向量当作特征。比如，可以直接提取每一层encoder的token表示当作特征，输入现有的特定任务神经网络中进行训练。 Pretrain + Fine tune参考资料 基于transformers的自然语言处理(NLP)入门–在线阅读 https://datawhalechina.github.io/learn-nlp-with-transformers/#/ 李宏毅机器学习2019-ELMO,BERT,GPT https:// www.bilibili.com/video/BV1Gb411n7dE?p=61","categories":[{"name":"04 组队学习","slug":"04-组队学习","permalink":"http://example.com/categories/04-%E7%BB%84%E9%98%9F%E5%AD%A6%E4%B9%A0/"},{"name":"第29期 基于transformer的NLP","slug":"04-组队学习/第29期-基于transformer的NLP","permalink":"http://example.com/categories/04-%E7%BB%84%E9%98%9F%E5%AD%A6%E4%B9%A0/%E7%AC%AC29%E6%9C%9F-%E5%9F%BA%E4%BA%8Etransformer%E7%9A%84NLP/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"http://example.com/tags/%E7%AC%94%E8%AE%B0/"},{"name":"NLP","slug":"NLP","permalink":"http://example.com/tags/NLP/"},{"name":"组队学习","slug":"组队学习","permalink":"http://example.com/tags/%E7%BB%84%E9%98%9F%E5%AD%A6%E4%B9%A0/"},{"name":"预训练模型","slug":"预训练模型","permalink":"http://example.com/tags/%E9%A2%84%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B/"},{"name":"BERT","slug":"BERT","permalink":"http://example.com/tags/BERT/"}]},{"title":"task02 学习Attentioin和Transformer","slug":"nlp-transformer-task02","date":"2021-09-17T01:09:24.000Z","updated":"2021-09-20T18:36:16.613Z","comments":true,"path":"nlp-transformer-task02/","link":"","permalink":"http://example.com/nlp-transformer-task02/","excerpt":"","text":"Attentionseq2seqseq2seq是一种常见的NLP模型结构，全称是：sequence to sequence，翻译为“序列到序列”。顾名思义：从一个文本序列得到一个新的文本序列。典型的任务有：机器翻译任务，文本摘要任务。 seq2seq模型由编码器（encoder）和解码器（decoder）组成，编码器用来分析输入序列，解码器用来生成输出序列。编码器会处理输入序列中的每个元素，把这些信息转换成为一个背景向量（context vector）。当我们处理完整个输入序列后，编码器把背景向量发送给解码器，解码器通过背景向量中的信息，逐个元素输出新的序列。 在transformer模型之前，seq2seq中的编码器和解码器一般采用循环神经网络（RNN），虽然非常经典，但是局限性也非常大。最大的局限性就在于编码器和解码器之间的唯一联系就是一个固定长度的context向量。也就是说，编码器要将整个序列的信息压缩进一个固定长度的向量中。这样做存在两个弊端： 语义向量可能无法完全表示整个序列的信息 先输入到网络的内容携带的信息会被后输入的信息覆盖掉，输入序列越长，这个现象就越严重 Attention为了解决seq2seq模型中的两个弊端，Bahdanau等人在论文《Neural Machine Translation by Jointly Learning to Align and Translate》中提出使用Attention机制，使得seq2seq模型可以有区分度、有重点地关注输入序列，从而极大地提高了机器翻译的质量。 一个有注意力机制的seq2seq与经典的seq2seq主要有2点不同： 首先，编码器会把更多的数据传递给解码器。编码器把所有时间步的 hidden state（隐藏层状态）传递给解码器，而不是只传递最后一个 hidden state（隐藏层状态） 注意力模型的解码器在产生输出之前，做了一个额外的attention处理 Transformer模型架构transformer原论文的架构图： 一个更清晰的架构图： 从输入到输出拆开看就是： INPUT：input vector + position encoding ENCODERs（×6），and each encoder includes： input multi-head self-attention residual connection&amp;norm full-connected network residual connection&amp;norm output DECODERs（×6），and each decoder includes： input Masked multihead self-attention residual connection&amp;norm multi-head self-attention residual connection&amp;norm full-connected network residual connection&amp;norm output OUTPUT： output (decoder’s) linear layer softmax layer output 模型输入词向量和常见的NLP任务一样，我们首先会使用词嵌入算法（embedding），将输入文本序列的每个词转换为一个词向量。 位置向量Transformer模型对每个输入的词向量都加上了一个位置向量。这些向量有助于确定每个单词的位置特征，或者句子中不同单词之间的距离特征。词向量加上位置向量背后的直觉是：将这些表示位置的向量添加到词向量中，得到的新向量，可以为模型提供更多有意义的信息，比如词的位置，词之间的距离等。 （生成位置编码向量的方法有很多种） 编码器和解码器注：1. 编码器和解码器中有相似的模块和结构，所以合并到一起介绍。2. 本部分按照李宏毅老师的Attention，Transformer部分的课程PPT来，因为lee的课程对新手更友好。 Self-Attentionself-attention对于每个向量都会考虑整个sequence的信息后输出一个向量，self-attention结构如下：FC：Fully-connected network 全连接网络ai: 输入变量。可能是整个网络的输入，也可能是某个隐藏层的输出bi: 考虑整个sequence信息后的输出变量 矩阵计算：目标：根据输入向量矩阵I，计算输出向量矩阵O。矩阵运算过程： 矩阵I分别乘以Wq, Wk, Wv（参数矩阵，需要模型进行学习），得到矩阵Q, K, V。 矩阵K的转置乘以Q，得到注意力权重矩阵A，归一化得到矩阵A’。 矩阵V乘矩阵A‘，得到输出向量矩阵O。 Multi Head Self-Attention简单地说，多了几组Q，K，V。在Self-Attention中，我们是使用𝑞去寻找与之相关的𝑘，但是这个相关性并不一定有一种。那多种相关性体现到计算方式上就是有多个矩阵𝑞，不同的𝑞负责代表不同的相关性。 Transformer 的论文通过增加多头注意力机制（一组注意力称为一个 attention head），进一步完善了Self-Attention。这种机制从如下两个方面增强了attention层的能力： 它扩展了模型关注不同位置的能力。 多头注意力机制赋予attention层多个“子表示空间”。 残差链接和归一化残差链接：一种把input向量和output向量直接加起来的架构。归一化：把数据映射到0～1范围之内处理。 模型输出线性层和softmaxDecoder 最终的输出是一个向量，其中每个元素是浮点数。我们怎么把这个向量转换为单词呢？这是线性层和softmax完成的。 线性层就是一个普通的全连接神经网络，可以把解码器输出的向量，映射到一个更大的向量，这个向量称为 logits 向量：假设我们的模型有 10000 个英语单词（模型的输出词汇表），此 logits 向量便会有 10000 个数字，每个数表示一个单词的分数。 然后，Softmax 层会把这些分数转换为概率（把所有的分数转换为正数，并且加起来等于 1）。然后选择最高概率的那个数字对应的词，就是这个时间步的输出单词。 损失函数Transformer训练的时候，需要将解码器的输出和label一同送入损失函数，以获得loss，最终模型根据loss进行方向传播。 只要Transformer解码器预测了组概率，我们就可以把这组概率和正确的输出概率做对比，然后使用反向传播来调整模型的权重，使得输出的概率分布更加接近整数输出。 那我们要怎么比较两个概率分布呢？：我们可以简单的用两组概率向量的的空间距离作为loss（向量相减，然后求平方和，再开方），当然也可以使用交叉熵(cross-entropy)]和KL 散度(Kullback–Leibler divergence)。 参考资料理论部分[1] (强推)李宏毅2021春机器学习课程 https://www.bilibili.com/video/BV1Wv411h7kN?from=search&amp;seid=17090062977285779802&amp;spm_id_from=333.337.0.0[2] 基于transformers的自然语言处理(NLP)入门（涵盖了图解系列、annotated transformer、huggingface） https://github.com/datawhalechina/learn-nlp-with-transformers[3] 图解transformer|The Illustrated Transformer http://jalammar.github.io/illustrated-transformer/[4] 图解seq2seq, attention|Visualizing A Neural Machine Translation Model (Mechanics of Seq2seq Models With Attention) https://jalammar.github.io/visualizing-neural-machine-translation-mechanics-of-seq2seq-models-with-attention/ 代码部分[5] The Annotated Transformer http://nlp.seas.harvard.edu//2018/04/03/attention.html[6] Huggingface/transformers https://github.com/huggingface/transformers/blob/master/README_zh-hans.md 论文部分Attention is all “we” need. 其他不错的博客或教程[7] 基于transformers的自然语言处理(NLP)入门–在线阅读 https://datawhalechina.github.io/learn-nlp-with-transformers/#/[8] 李宏毅2021春机器学习课程笔记——自注意力机制 https://www.cnblogs.com/sykline/p/14730088.html[9] 李宏毅2021春机器学习课程笔记——Transformer模型 https://www.cnblogs.com/sykline/p/14785552.html[10] 李宏毅机器学习学习笔记——自注意力机制 https://blog.csdn.net/p_memory/article/details/116271274[11] 车万翔-自然语言处理新范式：基于预训练的方法【讲座+PPT】 https://app6ca5octe2206.pc.xiaoe-tech.com/detail/v_611f48f3e4b02ac39d12246f/3?fromH5=true[12] 苏剑林-《Attention is All You Need》浅读（简介+代码）https://spaces.ac.cn/archives/4765","categories":[{"name":"04 组队学习","slug":"04-组队学习","permalink":"http://example.com/categories/04-%E7%BB%84%E9%98%9F%E5%AD%A6%E4%B9%A0/"},{"name":"第29期 基于transformer的NLP","slug":"04-组队学习/第29期-基于transformer的NLP","permalink":"http://example.com/categories/04-%E7%BB%84%E9%98%9F%E5%AD%A6%E4%B9%A0/%E7%AC%AC29%E6%9C%9F-%E5%9F%BA%E4%BA%8Etransformer%E7%9A%84NLP/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"http://example.com/tags/%E7%AC%94%E8%AE%B0/"},{"name":"NLP","slug":"NLP","permalink":"http://example.com/tags/NLP/"},{"name":"组队学习","slug":"组队学习","permalink":"http://example.com/tags/%E7%BB%84%E9%98%9F%E5%AD%A6%E4%B9%A0/"},{"name":"预训练模型","slug":"预训练模型","permalink":"http://example.com/tags/%E9%A2%84%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B/"},{"name":"attention","slug":"attention","permalink":"http://example.com/tags/attention/"},{"name":"transfomer","slug":"transfomer","permalink":"http://example.com/tags/transfomer/"}]},{"title":"task01 NLP学习概览","slug":"nlp-transformer-task01","date":"2021-09-12T16:14:06.000Z","updated":"2021-09-20T16:11:26.786Z","comments":true,"path":"nlp-transformer-task01/","link":"","permalink":"http://example.com/nlp-transformer-task01/","excerpt":"","text":"NLP思维导图(最近更新日期：2021-09-13) 参考资料 Datawhale-基于transformers的自然语言处理(NLP)入门 https://github.com/datawhalechina/learn-nlp-with-transformers 《自然语言处理-基于预训练模型的方法》 https://item.jd.com/13344628.html 刘知远老师-NLP研究入门之道 https://github.com/zibuyu/research_tao","categories":[{"name":"04 组队学习","slug":"04-组队学习","permalink":"http://example.com/categories/04-%E7%BB%84%E9%98%9F%E5%AD%A6%E4%B9%A0/"},{"name":"第29期 基于transformer的NLP","slug":"04-组队学习/第29期-基于transformer的NLP","permalink":"http://example.com/categories/04-%E7%BB%84%E9%98%9F%E5%AD%A6%E4%B9%A0/%E7%AC%AC29%E6%9C%9F-%E5%9F%BA%E4%BA%8Etransformer%E7%9A%84NLP/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"http://example.com/tags/%E7%AC%94%E8%AE%B0/"},{"name":"NLP","slug":"NLP","permalink":"http://example.com/tags/NLP/"},{"name":"组队学习","slug":"组队学习","permalink":"http://example.com/tags/%E7%BB%84%E9%98%9F%E5%AD%A6%E4%B9%A0/"},{"name":"预训练模型","slug":"预训练模型","permalink":"http://example.com/tags/%E9%A2%84%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B/"}]},{"title":"CS61A Week1 Comupter_Science, Functions","slug":"cs61a-week1","date":"2021-09-01T08:46:52.000Z","updated":"2021-09-17T01:51:24.035Z","comments":true,"path":"cs61a-week1/","link":"","permalink":"http://example.com/cs61a-week1/","excerpt":"","text":"前言 CS61A作为61系列基础课程的第一门课程，是一门计算机入门导论课程，伯克利大一新生的第一门计算机课程。该课程主要使用Python语言，简要介绍了计算机的各种概念，范围广而涉猎不深，包括高阶函数，抽象，递归和树，OOP，简单的SQL语句，Scheme语法和解释器等概念。 目前推荐的课程是20年秋季学期(fa20)的课程。 ——名校公开课程评价网 名校公开课程评价网-cs61a 文档组织对应不同教学内容，文档组织如下： 0_课件：lecture 1_代码：lecture代码 2_笔记：学习笔记 使用markdown 内容包括：Weekx内容(x=week number), Lecture Notes, Lab Notes, Homework Notes 3_实验：lab 4_作业：homework 5_项目：project Week1内容 Week1主要内容： Lecture01 Computer Science; Lecture02 Functions 介绍计算机科学和函数基础知识 Lab00: Getting Started 安装Python3，终端的使用，常用命令行，文档测试（doctest）的使用，测试和提交使用OK系统 HW01: Variables &amp; Functions, Control。掌握函数特性 Lecture NotesWhat is Computer Science 计算机科学是一门定义和解决计算问题的方法和技术的学科。它的分支结构参考CSRanking的分类方式（ http://csrankings.org/#/index?all&amp;world），大概可以分为人工智能（计算机视觉、机器学习、自然语言处理、信息检索…）、系统（计算机结构、网络、安全、数据库、操作系统、分布式…）、理论（算法和复杂度、formal method…）、交叉（计算生物/生物计算、人机交互、机器人…）等方向。 Anatomy of a Call Expression: Operator, Operand 在程式語言中, 指示程式進行運算(計算、比較或連結) 的符號, 稱為operators (運算子), 被運算的資料稱為operands (運算元), 一句中有operators 及operands 就稱為expression。 Environment Diagrams Environment Diagrams Tools: http://pythontutor.com/composingprograms.html#mode=edit Defining Functions 这里涉及到全局变量（Global Variable）和局部变量（Local Variable）的问题，全局变量是整个程序都可访问的变量，生存期从程序开始到程序结束；局部变量存在于模块中(比如某个函数)，只有在模块中才可以访问，生存期从模块开始到模块结束。简单的说， 全局变量：在模块内、在所有函数的外面、在class外面 局部变量：在函数内、在class的方法内 Lab Notes常用命令: 1234ls: lists all files in the current directorycd &lt;path to directory&gt;: change into the specified directorymkdir &lt;directory name&gt;: make a new directory with the given namemv &lt;source path&gt; &lt;destination path&gt;: move the file at the given source to the given destination 1234python3 xxx.py # 运行程序python3 -i xxx.py # 运行程序并打开交互式会话python3 -m doctest xxx.py # 运行文档测试python3 -m doctest - xxx.py # 运行文档测试并显示样例 Homework NotesBugTypeError: &#39;int&#39; object is not callable 修改程序名就可以了。 QuestionQ5: If Function vs Statement while… 参考资料 cs61a 20fall 官网 https://inst.eecs.berkeley.edu/~cs61a/fa20/","categories":[{"name":"01 计算机基础","slug":"01-计算机基础","permalink":"http://example.com/categories/01-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"CS61A 计算机程序的构造与解释","slug":"01-计算机基础/CS61A-计算机程序的构造与解释","permalink":"http://example.com/categories/01-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/CS61A-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9E%84%E9%80%A0%E4%B8%8E%E8%A7%A3%E9%87%8A/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"http://example.com/tags/%E7%AC%94%E8%AE%B0/"},{"name":"CS公开课","slug":"CS公开课","permalink":"http://example.com/tags/CS%E5%85%AC%E5%BC%80%E8%AF%BE/"},{"name":"python","slug":"python","permalink":"http://example.com/tags/python/"},{"name":"function","slug":"function","permalink":"http://example.com/tags/function/"}]},{"title":"《公式之美》：EVERYTHING IS EPHEMERAL BUT FORMULA IS ETERNAL","slug":"formula","date":"2021-08-04T12:27:54.000Z","updated":"2021-09-17T01:49:34.192Z","comments":true,"path":"formula/","link":"","permalink":"http://example.com/formula/","excerpt":"","text":"一个有点意思的科普书，尤其在不想写论文的时候，宁愿去看勾股定理的N种推导也不愿意碰论文。更好玩的是，这里面的插图要比内容更没有争议的获得一致好评。 1854年之前，欧洲数学家灿若星辰，笛卡儿、拉格朗日、牛顿、贝叶斯、拉普拉斯、柯西、傅里叶、伽罗瓦等，无一不是数学天才。1854—1935年，高斯、黎曼等人在数学界领袖群伦，德国取代英法成为世界的数学中心。1935年之后，希特勒给美国送上“科学大礼包”：哥德尔、爱因斯坦、德拜、冯.诺依曼、费米、冯.卡门、外尔……很多科学家逃至北美，数学大本营从德国转向美国，美国成为世界的数学中心。 古希腊几何学家阿波洛尼乌斯总结了圆锥曲线理论，一千多年后，德国天文学家开普勒才将其应用于行星轨道；高斯被认为最早发现非欧几何，半个世纪后，由他弟子创立的黎曼几何成为广义相对论的数学基础。伴随着杠杆原理、牛顿三大定律、麦克斯韦方程、香农公式、贝叶斯定理等，人类向蒸汽时代、电力时代、信息时代乃至人工智能时代徐徐迈进。 1+1=2：数学的溯源 勾股定理：数与形的结合 费马大定理：困扰人类358年 牛顿-莱布尼茨公式：无穷小的秘密 万有引力：从混沌到光明 欧拉公式：最美的等式 伽罗瓦理论：无解的方程 危险的黎曼猜想 熵增定律：寂灭是宇宙宿命？ 麦克斯韦方程组：让黑暗消失 质能方程：开启潘多拉的魔盒 薛定谔方程：猫与量子世界 狄拉克方程：反物质的“先知” 杨-米尔斯规范场论：大统一之路 香农公式：5G背后的主宰 布莱克-斯科尔斯方程：金融“巫师” 枪械：弹道里的“技术哲学” 胡克定律：机械表的心脏 混沌理论：一只蝴蝶引发的思考 凯利公式：赌场上的最大赢家 贝叶斯定理：AI如何思考？ 三体问题：挥之不去的乌云 椭圆曲线方程：比特币的基石 参考资料 《公式之美》https://book.douban.com/subject/35218287/","categories":[{"name":"沉思录","slug":"沉思录","permalink":"http://example.com/categories/%E6%B2%89%E6%80%9D%E5%BD%95/"}],"tags":[{"name":"阅读","slug":"阅读","permalink":"http://example.com/tags/%E9%98%85%E8%AF%BB/"},{"name":"math","slug":"math","permalink":"http://example.com/tags/math/"}]},{"title":"NLP中的文本表示方法","slug":"nlp-text-representation","date":"2021-07-31T11:48:54.000Z","updated":"2021-09-17T01:53:35.231Z","comments":true,"path":"nlp-text-representation/","link":"","permalink":"http://example.com/nlp-text-representation/","excerpt":"","text":"TODO 参考资料","categories":[{"name":"02 人工智能","slug":"02-人工智能","permalink":"http://example.com/categories/02-%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"},{"name":"自然语言处理","slug":"02-人工智能/自然语言处理","permalink":"http://example.com/categories/02-%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"}],"tags":[{"name":"NLP","slug":"NLP","permalink":"http://example.com/tags/NLP/"},{"name":"文本表示","slug":"文本表示","permalink":"http://example.com/tags/%E6%96%87%E6%9C%AC%E8%A1%A8%E7%A4%BA/"}]},{"title":"《小狗钱钱》：理财启蒙的童话","slug":"小狗钱钱","date":"2021-07-28T18:06:58.000Z","updated":"2021-09-17T01:49:21.395Z","comments":true,"path":"小狗钱钱/","link":"","permalink":"http://example.com/%E5%B0%8F%E7%8B%97%E9%92%B1%E9%92%B1/","excerpt":"","text":"《小狗钱钱》是一本理财的启蒙书籍，讲述的是一个会理财的小狗的童话故事：从这个童话故事里可以了解一些金钱的秘密和真相，以及投资、理财的办法。这个故事描述了在实施这些方法的过程中可能遇到的挑战，并且说明了一些令人难以置信的结果。 前言 认为我们必须忍受拮据的生活，甚至认为这样才是高尚的——这种想法是人类犯下的最重大的错误之一。 有一些批判的声音说，理财是一个很资本主义的概念。把家庭或者生活当做一个公司去经营，过于理性、物质、精明，以至于丧失了生活中的乐趣，因为生活是体验和感受为主的。实际上金钱带来了诸多限制，不然为什么大家整天想着财务自由呢。据说犹太人擅长经商的原因之一就是不掩盖自己对财富的欲望。所以，坦白的说，我很穷，我想赚钱。 第二章 梦想储蓄罐和梦想相册 太多的人做事犹豫不决，就是因为他们觉得没有完全弄懂这件事。真正付诸实践要比纯粹的思考有用多了。 光想是没用的，just do it. 第三章 达瑞，一个很会挣钱的男孩 你去准备一个本子，给它取名叫‘成功日记’，然后把所有做成功的事情记录进去。你最好每天都做这件事，每次都写至少5条你的个人成果，任何小事都可以。开始的时候也许你觉得不太容易，可能会问自己，这件或那件事情是否真的可以算作成果。在这种情况下，你的回答应该是肯定的。过于自信比不够自信要好得多。 成功日记，对于一个谦虚的典型中国人来说也太羞耻了吧。但是，最后一句绝对是真理。过于自信或许会经常丢面子，但会抓住很多意想不到的机会，其中某个机会或许就改变了人生轨迹。一定要多做尝试。 第四章 堂兄的挣钱之道 第一，无论在什么时候都不能把希望只寄托在一份工作上，它持续的时间不会像你设想的那么长，所以你要立即寻找另一份替代的工作。 生活不易，多才多艺。打工人要想生存，就得多掌握点技能。 第五章 钱钱以前的主人 困难总是在不断地出现。尽管如此，你每天还是要不间断地去做对你的未来意义重大的事情。你为此花费的时间不会超过10分钟，但是就是这10分钟会让一切变得不同。大多数人总是在现有的水平上停滞不前，就是因为他们没有拿出这10分钟。他们总是期望情况能向有利于自己的方向转变，但是他们忽视了一点，那就是他们首先必须改变自己。当你决定做一件事情的时候，你必须在72小时之内完成，否则你很可能永远不会再做了。 个人来说，对未来意义重大的事情就是每天花10分钟记账。 第六章 爸爸妈妈犯下的错误 根本上说，那些陷入债务的人只要听从4个忠告就可以解决负债问题。一切都很简单。” 欠债的人应当毁掉所有的信用卡。 “因为大多数人在使用信用卡的时候，会比使用现金时花的钱要多得多。”钱钱答道。 应当尽可能少地偿还贷款——也就是大人们说的分期付款。 也许这个忠告听起来有点儿可笑，但你要知道，分期付款额越高，每个月剩下的生活费就越少。 将扣除生活费后剩下的钱的一半存起来，剩下的一半用于支付消费贷款。最好根本不申请消费贷款。 消费贷款是与住房无关的贷款。假如人们为了购置新的汽车、家具、电视机或其他用于生活的商品而贷款，就是消费贷款。这时候贷款的人应当遵守的一个原则，就是将不用于生活的那部分钱的一半存起来，另一半用于偿还贷款。你的爸爸妈妈应当开始攒钱，他们不需要等到还清债务以后再开始存钱，他们可以现在立即开始，只有这样，他们才有能力在不申请新的贷款的情况下，满足自己的愿望。那样他们也才能心安理得地、更好地享用这些东西。钱钱点头说：“这个主意真不错。此外，所有的消费贷款都是不明智的。聪明的做法是只把以前积攒起来的财富用于支出。” 绝不借债。 我作了一个决定：我绝不借债。为实现一个愿望，我要提前开始储蓄。我绝不要陷入和爸爸妈妈一样的困境。 第七章 在金先生家 金先生慢悠悠地说，“鹅代表你的钱。如果你存钱，你就会得到利息。利息就相当于金蛋。”金先生接着说：“大多数人生来并没有‘鹅’。这就是说，他们的钱不足以让他们依靠利息来生活。”这完全要根据你的目标来决定。如果你总是把10%的钱变成‘鹅’，那么你一定会变得富有。但如果你想有一天真的非常有钱的话，你存的比例可能得再高一些。我的习惯是把我收入的50%变成我的‘鹅’。” 这里涉及到经济学中生产要素的概念。生产要素包括劳动、土地、资本、信息、技术等。劳动的收入是工资，土地的收入是地租，资本的收入是利息… 第八章 陶穆太太 我不同意她的话。金先生看上去十分快乐，而爸爸妈妈却恰恰相反，总是不太高兴。直觉告诉我，贫穷更容易产生不幸。 你以为有钱人真的很快乐吗？是的，他们的快乐你根本想象不到。所以，停止自我安慰吧hh 第十二章 陶穆太太归来 要想过更幸福、更满意的生活，人就得改变自身。这和钱无关，金钱本身既不会使人幸福，也不会带来不幸。金钱是中性的，既不好，也不坏。只有当钱属于某一个人的时候，它才会对这个人产生好的影响或者坏的影响。钱可以被用于好的用途，也可以被用于坏的用途。一个幸福的人有了钱会更幸福；而一个悲观忧虑的人，钱越多，烦恼就越多。 第十三章 巨大的危机 “这不像你现在想的那么简单。”我听见钱钱用恳切的口气接着说，“成功会使人骄傲。如果你骄傲自大，你就会停止学习。不学习，人就不会再进步。”它停顿了一下，接着说：“当你写成功日记的时候，你会对自己，对世界，还有对成功的规律作更深入的思考，会越来越多地了解自己和自己的愿望，这样你才会有能力去理解别人。彻底了解自己和世界上的所有秘密，是我们无法完全实现的一种理想，但我们可以一步一步地慢慢接近这种理想。”恐惧总是出现在我们设想事情会如何不顺的时候。我们对失败的可能性想得越多，就会越害怕。而当你看着自己的成功日记时，你就会注意到那些成功的事情，自然而然也就会想到应该怎样去做。当你朝着积极的目标去思考的时候，就不会心生畏惧。 首先，人是不能停止学习的，无论到什么阶段，停下来马上会变得迟钝、狭隘。其次，在另一本流行的理财书籍《穷查理宝典》中，作者查理芒格的理念是，“生活上的大多数成功来自于你应该知道避免哪些事情”。虽然作者很牛逼，但我很难认同这一点。因为失败的原因实在太多了，一件事情可以找一万个理由做不到，但只要找到一条路这事就能做成。正如幸福的家庭都是相似的，不幸的家庭各有各的不幸。 第十四章 投资俱乐部 我们一致认为，只要学会了我们的咒语，就可以从无到有地变出钱来。我们的咒语是：1．确定自己希望获得财务上的成功。2．自信，有想法，做自己喜欢做的事。3．把钱分成日常开销、梦想目标和金鹅账户三部分。4．进行明智的投资。5．享受生活。 第3点，分割账户的理念。我觉得应该分为，日常开销、负债、储蓄、理财。就是说，一个人的净收入大概用于这4个方面的预算是： 12345678910I = 收入if 负债: 日常开销 = 50%*I 负债 = 25%*I 储蓄 = 15%*I 理财 = 10%*Ielse: 日常开销 = 50%*I 储蓄 = 30%*I 理财 = 20%*I 这是我目前的分配偏好。 第十七章 爷爷奶奶害怕风险 “只有当我们把它卖出的时候，才会有亏损。可是我们并没有这么做。” 每当股票和基金跌了的时候，很适合自我安慰。这句话其实是经济学或者说会计记账的把戏，因为不卖的话，没有产生经济活动，账本没有变化。:) 自力更生——写给成年人的后记 我们推崇一种聪明的、简朴的生活方式。也就是说，宁愿购买一件一流产品，也不要不停地买许多的二流产品。而且，不要仅仅因为一件产品的外观不再时髦而新产品正在流行，就不断追逐新鲜的东西。生活质量不是由越来越多的高科技产品堆砌而成的，而体现在一些别的方面，比如悠闲地享受一下生活，增进邻里关系，表达感情或者从事艺术性和创造性的活动。 这也是我开始喜欢极简主义的原因吧。开始极简后，才发现自己买了太多没用的东西。 参考资料 《小狗钱钱》https://book.douban.com/subject/1095634/","categories":[{"name":"沉思录","slug":"沉思录","permalink":"http://example.com/categories/%E6%B2%89%E6%80%9D%E5%BD%95/"}],"tags":[{"name":"阅读","slug":"阅读","permalink":"http://example.com/tags/%E9%98%85%E8%AF%BB/"},{"name":"财务管理","slug":"财务管理","permalink":"http://example.com/tags/%E8%B4%A2%E5%8A%A1%E7%AE%A1%E7%90%86/"}]},{"title":"SQL表连接&聚合函数&窗口函数","slug":"SQL重点","date":"2021-07-26T19:33:19.000Z","updated":"2021-09-17T01:53:20.789Z","comments":true,"path":"SQL重点/","link":"","permalink":"http://example.com/SQL%E9%87%8D%E7%82%B9/","excerpt":"","text":"表连接 joinjoin: 以字段（列）为单位进行多表连接。 1234Inner join # 只保留两个表中同时存在的记录。Left join # 保留左表所有的记录，无论其是否能够在右表中匹配到对应的记录。若无匹配记录，则需要用NULL填补。Right join # 保留右表所有的记录，无论其是否能够在左表中匹配到对应的记录。若无匹配记录，则需要用NULL填补。Full join # 左表和右表所有的记录都会保留，没有匹配记录的用NULL填补。 聚合函数1234sum() # 返回分组后组内所有记录的和avg() # 返回分组后组内所有记录的均值count() # 返回分组后组内所有记录的计数max()/min() # 返回分组后组内所有记录的最大值、最小值 窗口函数窗口函数对记录分组之后进行聚合计算，为分组中的每条记录返回特定值。 窗口函数的基本结构是： 12&lt;窗口函数&gt;() over (partition by &lt;col1, col2&gt; order by &lt;col3 desc/asc, col4 asc/desc&gt;) 窗口函数 介绍 rank() over() 返回记录在同一分组内的排序，如果有并列名次的行，会占用下一名次的位置 dense_rank() over() 返回记录在同一分组内的排序，如果有并列名次的行，不占用下一名次的位置 row_number() over() 返回记录在同一分组内的排序，不考虑并列名次的情况 percent_rank() over() 返回记录在同一分组内排序的分位数，为0~1 sum(col) over() 返回同一分组内所有记录col值的和，同一分组内记录的返回值相同 avg(col) over() 返回同一分组内所有记录col值的平均值，同一分组内记录的返回值相同 max/min(col) over() 返回同一分组内所有记录col值的最大值/最小值，同一分组内记录的返回值相同 聚合函数在窗口函数中，是对自身记录、及位于自身记录以上的数据进行运算的结果。聚合函数作为窗口函数，可以在每一行的数据里直观的看到，截止到本行数据，统计数据是多少（最大值、最小值等）。同时可以看出每一行数据，对整体统计数据的影响。 索引索引用来排序数据以加快搜索和排序操作的速度。可以在一个或多个列上定义索引，使DBMS保存其内容的一个排过序的列表。在定义了索引后，DBMS以使用书的索引类似的方法使用它。DBMS 搜索排过序的索引，找出匹配的位置，然后检索这些行。 索引是关系数据库中对某一列或多个列的值进行预排序的数据结构。通过使用索引，可以让数据库系统不必扫描整个表，而是直接定位到符合条件的记录，这样就大大加快了查询速度。 索引用CREATE INDEX 语句创建（不同DBMS创建索引的语句变化很大）。 参考资料[1]通俗易懂的学会：SQL窗口函数 https://zhuanlan.zhihu.com/p/92654574[2]《拿下Offer:数据分析师求职面试指南》 https://item.jd.com/12686131.html[3]《SQL必知必会》 https://book.douban.com/subject/24250054/[4]廖雪峰的官方网站-SQL教程 https://www.liaoxuefeng.com/wiki/1177760294764384","categories":[{"name":"02 人工智能","slug":"02-人工智能","permalink":"http://example.com/categories/02-%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"},{"name":"数据分析","slug":"02-人工智能/数据分析","permalink":"http://example.com/categories/02-%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"}],"tags":[{"name":"SQL","slug":"SQL","permalink":"http://example.com/tags/SQL/"}]},{"title":"5h打通Git全套教程","slug":"git","date":"2021-07-23T13:01:25.000Z","updated":"2021-09-17T01:53:30.399Z","comments":true,"path":"git/","link":"","permalink":"http://example.com/git/","excerpt":"","text":"本文是以下课程的笔记： 【尚硅谷】5h打通Git全套教程丨2021最新IDEA版（涵盖GitHub\\Gitee码云\\GitLab）https://www.bilibili.com/video/BV1vy4y1s7k6?p=41 课程结构本套视频从基础的常用命令开始讲起，到开发工具集成Git 、GitHub如何进行团队协作、国内代码托管中心Gitee码云的使用、局域网自建代码托管平台GitLab服务器的部署。（本文主要是P1-P26的笔记。） P1-P2 Git P3-P6 Git概述 P7-P14 Git命令 P15-P18 Git分支 P19 Git团队协作 P20-P26 Git&amp;GitHub P27-P37 IDEA集成GitHub P38-P40 Gitee码云 P41-P44 GitLab P45 课程总结 Git介绍GitGit是一个免费的、开源的分布式版本控制系统，可以快速高效地处理从小型到大型的各种项目。 版本控制版本控制是一种记录文件内容变化，以便将来查阅特定版本修订情况的系统。版本控制其实最重要的是可以记录文件修改历史记录，从而让用户能够查看历史版本，方便版本切换。 版本控制工具 集中式版本控制工具：CVS、SVN(Subversion)、VSS…… 分布式版本控制工具：Git、 Mercurial、 Bazaar、 Darcs…… Git简史Git是Linus大神写的，所以和Linux一套命令 Git机制在工作区写代码，通过git add添加到暂存区，再通过git commit提交到本地库，生成历史版本。本地库可以push代码到远程库，也可以从远程库pull拉取代码，不同版本的代码可以进行merge。 代码托管中心-远程库代码托管中心是基于网络服务器的远程代码仓库，一般我们简单称为远程库。 局域网：GitLab 互联网：GitHub(国外)，Gitee（国内） Git常用命令一图以蔽之， Git分支分支在版本控制过程中，同时推进多个任务，为每个任务，我们就可以创建每个任务的单独分支。使用分支意味着程序员可以把自己的工作从开发主线上分离开来，开发自己分支的时候，不会影响主线分支的运行。对于初学者而言，分支可以简单理解为副本，一个分支就是一个单独的副本。（分支底层其实也是指针的引用） 同时并行推进多个功能开发，可以提高开发效率。各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响。失败的分支删除重新开始即可。 Git分支命令1234git branch -v # 查看分支git branch 分支名 # 创建分支git checkout 分支名 # 切换分支git merge 分支名 # 合并分支 合并冲突合并分支时，两个分支在同一个文件的同一个位置有两套完全不同的修改。Git无法替我们决定使用哪一个。必须人为决定新代码内容。 Git团队合作两个非常形象化的图和生动的例子！ 团队内合作 跨团队合作 GitHub远程仓库操作 clone会做如下操作： 拉取代码。 初始化本地仓库。 创建别名（origin） 邀请合作者 SSH登录 Git与其他环境集成官方文档-Git与各种IDE的集成：https://git-scm.com/book/en/v2 码云Gitee众所周知，GitHub服务器在国外，使用GitHub作为项目托管网站，如果网速不好的话，严重影响使用体验，甚至会出现登录不上的情况。针对这个情况，大家也可以使用国内的项目托管网站-码云 https://gitee.com/。 GitLabGitLab https://about.gitlab.com/是由GitLabInc.开发，使用MIT许可证的基于网络的Git仓库管理工具，且具有wiki和issue跟踪功能。使用Git作为代码管理工具，并在此基础上搭建起来的web服务。GitLab由乌克兰程序员DmitriyZaporozhets和ValerySizov开发，它使用Ruby语言写成。后来,一些部分用Go语言重写。截止2018年5月，该公司约有290名团队成员，以及2000多名开源贡献者。GitLab被IBM, Sony, JülichResearchCenter, NASA, Alibaba, Invincea, O’Reilly Media, Leibniz-Rechenzentrum, CERN, SpaceX等组织使用。","categories":[{"name":"03 工具箱","slug":"03-工具箱","permalink":"http://example.com/categories/03-%E5%B7%A5%E5%85%B7%E7%AE%B1/"}],"tags":[{"name":"git","slug":"git","permalink":"http://example.com/tags/git/"},{"name":"笔记","slug":"笔记","permalink":"http://example.com/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"大理：在民宿打工的日子","slug":"大理","date":"2021-07-21T14:49:49.000Z","updated":"2021-09-17T01:49:12.305Z","comments":true,"path":"大理/","link":"","permalink":"http://example.com/%E5%A4%A7%E7%90%86/","excerpt":"","text":"生活就是换个地方打工。 然而田园的生活也不是那么美好的，有很多想象不到的问题。比如，随时随地出现的各种蚊虫、大蜘蛛、蛇，花花草草都要每天浇水和定时剪枝，下雨天泳池会有很多脏东西需要处理，垃圾必须每天清空不然会有老鼠光顾，厨房排水做不好的话会倒流没法用（怪不得要专业疏通下水道），还有电路也时不时的出点毛病。 由于每天都在处理这种琐碎的事情，这段时间最常去的地方就是仓库了。仓库就像哆啦A梦的口袋一样，变出我以前不知道的各种工具来，有些我即使认识也不知道名字，但是这些小玩意儿在生活中如此有用，比如玻璃胶、磨砂纸、扎带种种。有一次，洗衣机旁的电源开关的接触不好，电工来修，把电线直接接到了一个插排上，虽然我对这个做法的安全性和易用性保持怀疑，但足够让物理一向不好的我很是佩服——毕竟我连火线零线都分不清，高中物理连接小灯泡的题也得想半天。 后来，就匆匆离开了。就像Harry说的，It is not better or worse than any place else - just different.","categories":[{"name":"沉思录","slug":"沉思录","permalink":"http://example.com/categories/%E6%B2%89%E6%80%9D%E5%BD%95/"}],"tags":[{"name":"大理","slug":"大理","permalink":"http://example.com/tags/%E5%A4%A7%E7%90%86/"}]},{"title":"校准对世界的预期","slug":"校准对世界的预期","date":"2021-07-15T09:34:54.000Z","updated":"2021-09-17T01:53:48.924Z","comments":true,"path":"校准对世界的预期/","link":"","permalink":"http://example.com/%E6%A0%A1%E5%87%86%E5%AF%B9%E4%B8%96%E7%95%8C%E7%9A%84%E9%A2%84%E6%9C%9F/","excerpt":"","text":"前言校准对世界的预期，这个题目出自于播客里听到的一段话： 从学校步入职场，要做的第一件事是重新校准你对世界的预期。这世界就是很糟糕的（或者说，这世界是 okay 的，但是你对它有不切实际的预期）。 很早的时候我经常怀疑，老师讲的东西有什么用？总有那么些课程，既不能直接用到工作中，又不能锻炼思维和逻辑能力。最后不得不承认一个危险的真相：上课太耽误学习了。而自己之所以为此感到痛苦，是因为抱有不合理的假设和预期。比如，当我产生怀疑的时候，其实我的假设就是老师教的就应该是有用的。可是凭什么呢？明明是我一厢情愿的这样认为，然后发现事实与预期不符，于是就不断痛苦。这样的假设还包括： H1. 学校教的是对工作有用的(×)学校是用来筛选的。学校有一套自己的游戏规则，按照这个规则走，就会得到老师和同学的赞赏、拿奖学金、保研、发论文、获得一系列荣誉奖项等——最终筛选出一个乖巧、听话、能干活、而且学习能力不错的人（或者至少愿意伪装成这样的人）。但把这个规则玩好，并不等同于拥有了工作需要的实力和能力，因为工作是另一套规则和玩法。由于从小一直灌输的是学校的规则，所以很难意识到游戏已经切换了，这就是常说的学生思维吧。 同时，这个世界上有无数个行业和领域，就有无数游戏和规则。诚然底层的东西是可以迁移，例如努力、负责等品质在哪里都是被认可的，但仍然要保持开放的心态，不能做出一个选择就否定其他选择，比如，一些马上想到但是不可描述的例子。这种心态的形成至少有3个因素：1.人的心理天然倾向于找各种理由支持自己的选择，而忽略对自己选择不利的方面。2.即使知道自己的选择有不好的一面，但出于虚荣坚决不能承认。3.即使知道自己的选择有不好的一面，但忽悠更多人进来才方便找人接盘。 最终通过身边的现象来看，乖乖听老师话的找不到工作只能考公（不是说公务员不好，而是说这种情况下并没有选择权），早早翘课去实习的拿到了令人羡慕的offer。用朋友圈里看到的一段话概括就是：主修LeetCode，辅修bilibili，旁听cs公开课，最后混一下学位必修课以达到毕业要求。这才是找到好工作的正确姿势。 H2. 世界是公平的(×)世界本来是不公平的，也不天然应该是公平的，因为人类文明的出现于是变好了一点点。所以那些声称只能接受这个糟糕的世界的说法也不对，这简直是在否定人类文明，没有什么是理所当然的。 尝试放下所有假设和预期我们对于很多东西的判断是来自于书籍、电视、网络、和他人的只言片语、自己的经验。通过经验学习当然很有效，但问题是这些经验不都是客观理性的，如果我们放下这些先验知识，感受事物本身，通过自己的独立思考得到自己的结论，那么被忽悠的概率会大大降低吧。 参考播客 BYM 职场12: 生活就是不公平的，你打算怎么办 收听链接 BYM 职场14: 认清世界之残酷，你才可能成为那 5% 拥有自己事业的人 收听链接","categories":[{"name":"沉思录","slug":"沉思录","permalink":"http://example.com/categories/%E6%B2%89%E6%80%9D%E5%BD%95/"}],"tags":[{"name":"沉思录","slug":"沉思录","permalink":"http://example.com/tags/%E6%B2%89%E6%80%9D%E5%BD%95/"}]},{"title":"一些好用的中英文LaTeX简历模板","slug":"一些好用的中英文LaTeX简历模板","date":"2021-07-15T08:23:20.000Z","updated":"2021-09-17T01:53:59.711Z","comments":true,"path":"一些好用的中英文LaTeX简历模板/","link":"","permalink":"http://example.com/%E4%B8%80%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84%E4%B8%AD%E8%8B%B1%E6%96%87LaTeX%E7%AE%80%E5%8E%86%E6%A8%A1%E6%9D%BF/","excerpt":"","text":"总结简历的结构主要包括： 标题 Heading（姓名、联系方式等） 教育背景 Education 经历 Experience 实习 Work 科研/论文 Publications 项目 Projects 个人技能 Skills GitHub模板英文简历 https://github.com/sb2nov/resume 中文简历 https://github.com/hijiangtao/resume 中英文兼容的简历 https://github.com/billryan/resume/tree/zh_CN 怎么写简历的参考文章师妹看了都说好的简历长啥样https://mp.weixin.qq.com/s/ea2Pq3ZbJ30lTV3etaECoQ 一个简洁优雅的 XeLaTeX 简历模板https://tiankuizhang.github.io/files/00CV_CN/README/","categories":[{"name":"03 工具箱","slug":"03-工具箱","permalink":"http://example.com/categories/03-%E5%B7%A5%E5%85%B7%E7%AE%B1/"}],"tags":[{"name":"laTeX","slug":"laTeX","permalink":"http://example.com/tags/laTeX/"},{"name":"简历","slug":"简历","permalink":"http://example.com/tags/%E7%AE%80%E5%8E%86/"}]},{"title":"SQL学习资料","slug":"SQL学习资料","date":"2021-07-14T07:32:58.000Z","updated":"2021-09-17T01:53:15.370Z","comments":true,"path":"SQL学习资料/","link":"","permalink":"http://example.com/SQL%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/","excerpt":"","text":"&lt;&lt;SQL必知必会&gt;&gt; https://book.douban.com/subject/35167240/ SQLZOO https://sqlzoo.net/ 牛客网-SQL https://www.nowcoder.com/activity/oj?tab=1 LeetCode-数据库 https://leetcode-cn.com/problemset/database/ Datafrog-SQL经典45题 https://www.bilibili.com/video/BV1pp4y1Q7Yv 尚硅谷-MySQL基础教程 https://www.bilibili.com/video/BV1xW411u7ax","categories":[{"name":"02 人工智能","slug":"02-人工智能","permalink":"http://example.com/categories/02-%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"},{"name":"数据分析","slug":"02-人工智能/数据分析","permalink":"http://example.com/categories/02-%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"}],"tags":[{"name":"SQL","slug":"SQL","permalink":"http://example.com/tags/SQL/"}]},{"title":"概率论与数理统计","slug":"概率论与数理统计","date":"2021-07-14T03:03:00.000Z","updated":"2021-09-17T01:53:40.027Z","comments":true,"path":"概率论与数理统计/","link":"","permalink":"http://example.com/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/","excerpt":"","text":"概率统计的基础概念随机试验；随机变量；概率分布；概率分布函数；概率密度函数；累积分布函数；样本和总体。 离散型随机变量及其分布根据随机试验的结果数量是否可数，分为离散型随机变量和连续型随机变量。 0-1分布/伯努利分布 定义：伯努利分布指的是对于随机变量X有参数为p（0&lt;1&lt;P），它分别以概率p和1-p取1和0为值。ex. 令X表示抛硬币的结果。 表示：X ~ b( p) 公式：P(X=1) = p, P(X=0) = 1-p, where p in [0,1] 期望与方差：E(X)=p, D(X)=p(1-p) 二项分布/n个重复独立的伯努利分布 在n次独立重复的伯努利试验中，设每次试验中事件A发生的概率为p。用X表示n重伯努利试验中事件A发生的次数，则X的可能取值为0，1，…，n,且对每一个k（0≤k≤n）,事件{X=k}即为“n次试验中事件A恰好发生k次”，随机变量X的离散概率分布即为二项分布（Binomial Distribution）。 表示：X ~ b(n, p) 概率函数： 期望与方差：E(X)=np, D(X)=np(1-p) 几何分布 定义：几何分布（Geometric distribution）是离散型概率分布。其中一种定义为：在n次伯努利试验中，试验k次才得到第一次成功的机率。详细地说，是：前k-1次皆失败，第k次成功的概率。 表示：X ~ g( p) 概率函数： 期望与方差：E(X)=1/p, D(X)=(1-p)/p^2 泊松分布 定义：Poisson分布，是一种统计与概率学里常见到的离散概率分布。泊松分布的参数λ是单位时间(或单位面积)内随机事件的平均发生次数。 泊松分布适合于描述单位时间内随机事件发生的次数。 表示：X ~ p(λ) 概率函数： 期望与方差：E(X)=λ, D(X)=λ ex. 某一服务设施在一定时间内到达的人数、某网站或APP在单位时间内的访问人数。 泊松分布与二项分布：当二项分布的n很大而p很小时，泊松分布可作为二项分布的近似，其中λ为np。通常当n≧20,p≦0.05时，就可以用泊松公式近似得计算。 连续型随机变量及其分布均匀分布 定义：均匀分布也叫矩形分布，它是对称概率分布，在相同长度间隔的分布概率是等可能的。 均匀分布由两个参数a和b定义，它们是数轴上的最小值和最大值，通常缩写为U（a，b）。 表示：X ~ u(a,b) 概率密度函数： 累积分布函数： 期望和方差：E(X)=(a+b)/2, D(X)=(a-b)^2/12 正态分布/高斯分布 定义：若随机变量X服从一个数学期望为μ、方差为σ^2的正态分布，记为N(μ，σ^2)。其概率密度函数为正态分布的期望值μ决定了其位置，其标准差σ决定了分布的幅度。当μ = 0,σ = 1时的正态分布是标准正态分布。 表示：N(μ，σ^2) 标准化变换： 概率分布函数： 期望和方差：E(X)=μ，D(X)=σ^2 性质： 指数分布 定义：在概率理论和统计学中，指数分布（也称为负指数分布）是描述泊松过程中的事件之间的时间的概率分布，即事件以恒定平均速率连续且独立地发生的过程。 X ~ E(λ) 其中λ &gt; 0是分布的一个参数，常被称为率参数（rate parameter）。即每单位时间内发生某事件的次数。指数分布的区间是[0,∞)。 概率密度函数： 累积分布函数： 期望和方差：E(X)=1/λ, D(X)=1/λ^2 随机变量的分布特征与统计量数据的分布特征与统计量 重要随机变量的期望和方差总结 随机变量 表示 期望 方差 0-1分布 X ~ b( p) E(X)=p D(X)=p(1-p) 二项分布 X ~ b(n, p) E(X)=np D(X)=np(1-p) 几何分布 X ~ g( p) E(X)=1/p D(X)=(1-p)/p^2 泊松分布 X ~ p(λ) E(X)=λ D(X)=λ 均匀分布 X ~ u(a,b) E(X)=(a+b)/2 D(X)=(a-b)^2/12 正态分布 N(μ，σ^2) E(X)=μ D(X)=σ^2 指数分布 X ~ E(λ) E(X)=1/λ D(X)=1/λ^2 协方差和相关系数协方差协方差（Covariance）在概率论和统计学中用于衡量两个变量的总体误差。而方差是协方差的一种特殊情况，即当两个变量是相同的情况。协方差表示的是两个变量的总体的误差。https://baike.baidu.com/item/协方差 相关系数相关关系是一种非确定性的关系，相关系数是研究变量之间线性相关程度的量。相关系数是最早由统计学家卡尔·皮尔逊设计的统计指标，是研究变量之间线性相关程度的量，一般用字母 r 表示。由于研究对象的不同，相关系数有多种定义方式，较为常用的是皮尔逊相关系数。https://baike.baidu.com/item/相关系数 独立事件、条件概率、贝叶斯定理独立事件独立事件：两个事件不论哪一个事件发生都不影响另一个发生的概率。A和B是独立的, 当且仅当: P(AB) = P(A)P(B) 条件概率条件概率：当事件B已经发生时，事件A发生的概率。事件B发生条件下事件A发生的概率为: P(A|B) = P(AB)/P(B)概率的乘法公式: P(AB) = P(A|B)P(B) = P(B|A)P(A) 全概率公式P(B) = ∑P(B|Ai)P(Ai)，i=1,2,...,k 贝叶斯定理通常P(Ai)为A的先验概率，P(Ai|B)为A的后验概率。 大数定理与中心极限定理大数定律大数定律：将随机变量X所对应的随机试验重复多次，随着试验次数的增加，X的均值会愈发趋近于E(X)。或当样本数据无限大时，样本均值趋于总体均值。 中心极限定理中心极限定理（central limit theorem）:设从均值为μ、方差为o2 （有限）的任意一个总体中抽取样本量为n的样本，当n充分大时，样本均值X的抽样分布近似服从均值为μ、方差为o2/n的正态分布。 参数估计置信区间、置信度在区间估计中，由样本统计量所构造的总体参数的估计区间称为置信区间（confidence interval），其中区间的最小值称为置信下限，最大值称为置信上限。由于统计学家在某种程度上确信这个区间会包含真正的总体参数，所以给它取名为置信区间。原因是，如果抽取了许多不同的样本，比如说抽取100个样本，根据每一个样本构造一个置信区间，这样，由100个样本构造的总体参数的100个置信区间中，有95%的区间包含了总体参数的真值，而5%则没包含，则95%这个值称为置信水平。一 般地，如果将构造置信区间的步骤重复多次，置信区间中包含总体参数真值的次数所占的比例称为置信水平（ confidence level），也称为置信度或置信系数（ confidence coefficient）。 评价估计量的标准：1.无偏性 2.有效性 3.一致性 一个总体参数的区间估计 两个总体参数的区间估计 假设检验H0: 原假设H1: 备择假设 检验统计量：用于假设检验计算的统计量，基于样本检验统计量的值来接受或者拒绝原假设。在原假设成立的情况下，检验统计量服从一个特定的分布；而在备择假设成立的情况下，则不服从该分布。常用的检验统计量有t统计量、z统计量等。 假设检验的基本思想通过证明在原假设成立的前提下，检验统计量出现当前值或者更为极端的值属于“小概率”事件，以此推翻原假设，接受备择假设。 p-value“检验统计量出现当前值或者更为极端的值”的概率就是p-value.将p值与预先设定的显著性水平α进行对比，如果p值小于α，就可以推翻原假设，接受备择假设。 两类错误 项目 没有拒绝H0 拒绝H0 H0为真 1-α (正确决策) α (弃真错误/第i类错误) H0为伪 β (取伪错误/第ii类错误) 1-β (正确决策) 抽样分布：z分布、卡方分布、t分布、F分布z分布z分布：正态分布（Normal distribution）又名高斯分布（Gaussiandistribution），若随机变量X服从一个数学期望为μ、方差为σ2的高斯分布，记为N(μ，σ2)。 卡方分布若n个相互独立的随机变量ξ₁，ξ₂，…,ξn ，均服从标准正态分布（也称独立同分布于标准正态分布），则这n个服从标准正态分布的随机变量的平方和构成一新的随机变量，其分布规律称为卡方分布（chi-square distribution）。其中参数n称为自由度。卡方分布是由正态分布构造而成的一个新的分布，当自由度很大时，卡方分布近似为正态分布。E = n, D = 2n t分布t分布:首先要提一句u分布，正态分布（normal distribution）是许多统计方法的理论基础。正态分布的两个参数μ和σ决定了正态分布的位置和形态。为了应用方便，常将一般的正态变 量X通过u变换(X一μ)/σ转化成标准正态变量u， 以使原来各种形态的正态分布都转换为μ=0，σ= 1的标准正态分布（standard normaldistribution） ，亦称u分布。根据中心极限定理，通过抽样模拟试验表明，在正态分布总体中以固定n抽取若干个样本时，样本均数的分布仍服从正态分布，即N (μ， σ)。所以，对样本均数的分布进行u变换，也可变换为标准正态分布N(0,1)由于在实际工作中，往往σ（总体方差）是未知的，常用s （样本方差）作为o的估计值，为了与u变换区别，称为t变换，统计量t值的分布称为t分布。 F分布 一个总体参数的检验 两个总体参数的检验 参考资料[1]《统计学完全教程》第一版 L.沃塞曼[2]《统计学》第六版 贾俊平","categories":[{"name":"02 人工智能","slug":"02-人工智能","permalink":"http://example.com/categories/02-%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"},{"name":"数据分析","slug":"02-人工智能/数据分析","permalink":"http://example.com/categories/02-%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"}],"tags":[{"name":"统计","slug":"统计","permalink":"http://example.com/tags/%E7%BB%9F%E8%AE%A1/"}]}],"categories":[{"name":"04 组队学习","slug":"04-组队学习","permalink":"http://example.com/categories/04-%E7%BB%84%E9%98%9F%E5%AD%A6%E4%B9%A0/"},{"name":"第29期 基于transformer的NLP","slug":"04-组队学习/第29期-基于transformer的NLP","permalink":"http://example.com/categories/04-%E7%BB%84%E9%98%9F%E5%AD%A6%E4%B9%A0/%E7%AC%AC29%E6%9C%9F-%E5%9F%BA%E4%BA%8Etransformer%E7%9A%84NLP/"},{"name":"第29.5期 深入浅出PyTorch","slug":"04-组队学习/第29-5期-深入浅出PyTorch","permalink":"http://example.com/categories/04-%E7%BB%84%E9%98%9F%E5%AD%A6%E4%B9%A0/%E7%AC%AC29-5%E6%9C%9F-%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAPyTorch/"},{"name":"01 计算机基础","slug":"01-计算机基础","permalink":"http://example.com/categories/01-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"CS61A 计算机程序的构造与解释","slug":"01-计算机基础/CS61A-计算机程序的构造与解释","permalink":"http://example.com/categories/01-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/CS61A-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9E%84%E9%80%A0%E4%B8%8E%E8%A7%A3%E9%87%8A/"},{"name":"沉思录","slug":"沉思录","permalink":"http://example.com/categories/%E6%B2%89%E6%80%9D%E5%BD%95/"},{"name":"02 人工智能","slug":"02-人工智能","permalink":"http://example.com/categories/02-%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"},{"name":"自然语言处理","slug":"02-人工智能/自然语言处理","permalink":"http://example.com/categories/02-%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"},{"name":"数据分析","slug":"02-人工智能/数据分析","permalink":"http://example.com/categories/02-%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"},{"name":"03 工具箱","slug":"03-工具箱","permalink":"http://example.com/categories/03-%E5%B7%A5%E5%85%B7%E7%AE%B1/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"http://example.com/tags/%E7%AC%94%E8%AE%B0/"},{"name":"NLP","slug":"NLP","permalink":"http://example.com/tags/NLP/"},{"name":"组队学习","slug":"组队学习","permalink":"http://example.com/tags/%E7%BB%84%E9%98%9F%E5%AD%A6%E4%B9%A0/"},{"name":"预训练模型","slug":"预训练模型","permalink":"http://example.com/tags/%E9%A2%84%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B/"},{"name":"GPT","slug":"GPT","permalink":"http://example.com/tags/GPT/"},{"name":"PyTorch","slug":"PyTorch","permalink":"http://example.com/tags/PyTorch/"},{"name":"BERT","slug":"BERT","permalink":"http://example.com/tags/BERT/"},{"name":"attention","slug":"attention","permalink":"http://example.com/tags/attention/"},{"name":"transfomer","slug":"transfomer","permalink":"http://example.com/tags/transfomer/"},{"name":"CS公开课","slug":"CS公开课","permalink":"http://example.com/tags/CS%E5%85%AC%E5%BC%80%E8%AF%BE/"},{"name":"python","slug":"python","permalink":"http://example.com/tags/python/"},{"name":"function","slug":"function","permalink":"http://example.com/tags/function/"},{"name":"阅读","slug":"阅读","permalink":"http://example.com/tags/%E9%98%85%E8%AF%BB/"},{"name":"math","slug":"math","permalink":"http://example.com/tags/math/"},{"name":"文本表示","slug":"文本表示","permalink":"http://example.com/tags/%E6%96%87%E6%9C%AC%E8%A1%A8%E7%A4%BA/"},{"name":"财务管理","slug":"财务管理","permalink":"http://example.com/tags/%E8%B4%A2%E5%8A%A1%E7%AE%A1%E7%90%86/"},{"name":"SQL","slug":"SQL","permalink":"http://example.com/tags/SQL/"},{"name":"git","slug":"git","permalink":"http://example.com/tags/git/"},{"name":"大理","slug":"大理","permalink":"http://example.com/tags/%E5%A4%A7%E7%90%86/"},{"name":"沉思录","slug":"沉思录","permalink":"http://example.com/tags/%E6%B2%89%E6%80%9D%E5%BD%95/"},{"name":"laTeX","slug":"laTeX","permalink":"http://example.com/tags/laTeX/"},{"name":"简历","slug":"简历","permalink":"http://example.com/tags/%E7%AE%80%E5%8E%86/"},{"name":"统计","slug":"统计","permalink":"http://example.com/tags/%E7%BB%9F%E8%AE%A1/"}]}